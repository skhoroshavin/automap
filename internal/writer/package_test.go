package writer

import (
	"bytes"
	"github.com/skhoroshavin/automap/internal/mapper/ast"
	"github.com/stretchr/testify/suite"
	"testing"
)

func TestWritePackage(t *testing.T) {
	suite.Run(t, new(WritePackageSuite))
}

type WritePackageSuite struct {
	suite.Suite
	out *bytes.Buffer
}

func (s *WritePackageSuite) SetupTest() {
	s.out = &bytes.Buffer{}
}

func (s *WritePackageSuite) TestWriteEmptyPackage() {
	err := writePackage(s.out, &ast.Package{Name: "test"})
	s.Assert().NoError(err)

	expected := `// Code generated by automap. DO NOT EDIT.

//go:build !automap

//go:generate automap

package test
`
	s.Assert().Equal(expected, s.out.String())
}

func (s *WritePackageSuite) TestWritePackageWithMappers() {
	err := writePackage(s.out, &ast.Package{
		Name: "test",
		Mappers: []*ast.Mapper{
			{
				Signature: "func GetQuestion() string",
				Result:    ast.NewValue("\"wtf\""),
			},
			{
				Signature: "func GetAnswer() int",
				Result:    ast.NewValue("42"),
			},
		},
	})
	s.Assert().NoError(err)

	expected := `// Code generated by automap. DO NOT EDIT.

//go:build !automap

//go:generate automap

package test

func GetQuestion() string {
	return "wtf"
}

func GetAnswer() int {
	return 42
}
`
	s.Assert().Equal(expected, s.out.String())
}

func (s *WritePackageSuite) TestWritePackageWithMappersAndImports() {
	err := writePackage(s.out, &ast.Package{
		Name: "test",
		Imports: []string{
			"\"awesome/pkg/core\"",
		},
		Mappers: []*ast.Mapper{
			{
				Signature: "func GetAnswer(v int) *core.Answer",
				Result: ast.NewStructPtr(
					"core.Answer",
					ast.NewField("V", ast.NewValue("v")),
				),
			},
		},
	})
	s.Assert().NoError(err)

	expected := `// Code generated by automap. DO NOT EDIT.

//go:build !automap

//go:generate automap

package test

import (
	"awesome/pkg/core"
)

func GetAnswer(v int) *core.Answer {
	return &core.Answer{
		V: v,
	}
}
`
	s.Assert().Equal(expected, s.out.String())
}
